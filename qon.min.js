/*!
 * qon.js
 *
 * qon.js is a tiny dependency injection library that has angularjs flavor but a requirejs-like syntax.
 *
 * @version 1.0.1
 * @author Hiroyuki OHARA <Hiroyuki.no22@gmail.com>
 * @copyright (c) 2014, 2015 Hiroyuki OHARA
 * @see https://github.com/no22/qon
 * @license MIT
 */(function(e,t,n){typeof define=="function"&&define.amd?define([],n):typeof exports=="object"?module.exports=n():e[t]=n()})(this,"qon",function(){"use strict";function Container(e){this.factories={},this.modules={},this.parent=e||{},this.prefix="$_"}function startsWith(e,t){return e.length>t.length&&e.slice(0,t.length)===t}function di(e){return new Container(e)}var SPACES=/\s+/mg,COMMENTS=/(?:\/\*[\s\S]*?\*\/|\/\/.*$)/mg,FNARGS=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,root=this||(0,eval)("this"),methods={module:function(e,t,n){if(!n){n=t;var r=n.toString().match(FNARGS)[1].replace(COMMENTS,"").replace(SPACES,"");t=r===""?[]:r.split(",")}return this.factories[e]={deps:t,factory:n},this.modules.hasOwnProperty(e)&&delete this.modules[e],this},_resolve:function(e,t){var n=[],r=e.length,i;for(i=0;i<r;i++)n[i]=this.resolve(e[i]);return t.apply(this,n)},_promise:function(e,t,n){var r=this,i=!1,s;return function(){return i?s:(s=t[e]=r._resolve(n.deps,n.factory),i=!0,s)}},resolve:function(e){var t=this.modules,n=this.factories,r=this.parent,i,s,o=!1,u=this.prefix;startsWith(e,u)&&(o=e.slice(u.length));if(t.hasOwnProperty(e))s=t[e];else if(o&&n.hasOwnProperty(o))s=t[e]=this._promise(o,t,n[o]);else if(n.hasOwnProperty(e))i=n[e],s=t[e]=this._resolve(i.deps,i.factory);else if(r instanceof this.constructor)s=r.resolve(e);else{if(!r||typeof r!="object"||!r.hasOwnProperty(e))throw"Error: can't resolve module '"+e+"'";s=r[e]}return s},inject:function(e,t){if(t)this.factories[e].deps=t;else for(var n in e)this.factories[n].deps=e[n];return this},run:function(e,t){return arguments.length===1?this.resolve(e):this._resolve(e,t)},di:function(e){return di(e||this)}};Container._super_=null,Container.prototype=Object.create(null,{constructor:{value:Container,enumerable:!1,writable:!0,configurable:!0}});for(var k in methods)Container.prototype[k]=methods[k];var app=di(root),qon={Container:Container,di:di,app:app};return["module","resolve","inject","run"].forEach(function(e){qon[e]=methods[e].bind(app)}),qon});